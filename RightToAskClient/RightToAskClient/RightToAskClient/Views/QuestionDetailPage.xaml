<?xml version="1.0" encoding="UTF-8"?>

<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:views="clr-namespace:RightToAskClient.Views;assembly=RightToAskClient"
             xmlns:xct="http://xamarin.com/schemas/2020/toolkit"
             xmlns:models="clr-namespace:RightToAskClient.Models;assembly=RightToAskClient"
             xmlns:local="clr-namespace:RightToAskClient"
             xmlns:vm="clr-namespace:RightToAskClient.ViewModels"
             xmlns:helpers="clr-namespace:RightToAskClient.Helpers;assembly=RightToAskClient"
             xmlns:controls="clr-namespace:RightToAskClient.Views.Controls;assembly=RightToAskClient"
             x:Class="RightToAskClient.Views.QuestionDetailPage"
             x:DataType="vm:QuestionViewModel">
	<ContentPage.ToolbarItems>
		<ToolbarItem Text="{xct:Translate HomeButtonText}" Command="{Binding HomeButtonCommand}"
		             x:DataType="vm:BaseViewModel"
		             IconImageSource="{helpers:ImageResource RightToAskClient.Images.home4.png}" />
		<ToolbarItem Text="{xct:Translate InfoPopupButtonText}" Command="{Binding InfoPopupCommand}"
		             x:DataType="vm:BaseViewModel"
		             IconImageSource="{helpers:ImageResource RightToAskClient.Images.help_75.png}" />
	</ContentPage.ToolbarItems>
	<ContentPage.Content>
		<ScrollView>
			<StackLayout x:Name="WholePage" Margin="20">
				<StackLayout Orientation="Vertical" IsVisible="{Binding IsNewQuestion}">
					<Label Text="{xct:Translate QuestionReviewHeaderText}" HorizontalTextAlignment="Center" Style="{StaticResource Header1}"
					       HorizontalOptions="StartAndExpand" />
					<BoxView />
				</StackLayout>
				<StackLayout Orientation="Horizontal" IsVisible="{Binding IsNewQuestion, Converter={StaticResource Key=cnvInvert}}">
					<Label Text="{xct:Translate QuestionHeaderText}" Style="{StaticResource Header2}"
					       HorizontalOptions="StartAndExpand" />
				</StackLayout>
				<Editor x:Name="QuestionTextEditor" Text="{Binding Question.QuestionText}"
				        IsReadOnly="{Binding IsNewQuestion, Converter={StaticResource Key=cnvInvert}}" />
				<FlexLayout AlignItems="Center" JustifyContent="SpaceBetween" HorizontalOptions="CenterAndExpand"
				            Direction="Row" Margin="0" Wrap="Wrap" IsVisible="{Binding IsNewQuestion, Converter={StaticResource Key=cnvInvert}}">
					<StackLayout Orientation="Horizontal" >
						<!-- Up-vote button -->
						<controls:ColorSingleToggleButton 
						                                  IsBrightened="{Binding Question.AlreadyUpvoted}"
						                                  Padding="5"
						                                  HeightRequest="{x:OnPlatform Android=27, iOS=42}"
						                                  BackgroundColor="Transparent" Command="{Binding UpvoteCommand}"
						                                  HorizontalOptions="Start"
						                                  AutomationProperties.IsInAccessibleTree="True"
						                                  AutomationProperties.Name="{xct:Translate QuestionFrameThumbsUpAccessibilityName}"
						                                  AutomationProperties.HelpText="{xct:Translate QuestionFrameThumbsUpAccessibilityText}">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup Name="BrightenedStates">
									<VisualState Name="NotBrightened">
										<VisualState.Setters>
											<Setter Property="Source" Value="{AppThemeBinding Light={helpers:ImageResource RightToAskClient.Images.thumb_up_light.png}, Dark={helpers:ImageResource RightToAskClient.Images.thumb_up_dark.png} }"/>
										</VisualState.Setters>
									</VisualState>
									<VisualState Name="Brightened">
										<VisualState.Setters>
											<Setter Property="Source" Value="{helpers:ImageResource RightToAskClient.Images.thumb_up_filled.png}"/>
										</VisualState.Setters>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</controls:ColorSingleToggleButton>
						<Label Text="{Binding UpVotes, StringFormat='{0:F0}'}" Style="{StaticResource NormalText}" Margin="0" Padding="0" VerticalOptions="CenterAndExpand"/>	
	                    <!-- Down-vote button -->
	                    <controls:ColorSingleToggleButton 
	                             BackgroundColor="Transparent" Command="{Binding DownvoteCommand}" Padding="5"
	                             IsBrightened="{Binding Question.AlreadyDownvoted}"
	                             HorizontalOptions="Start"
	                             HeightRequest="{x:OnPlatform Android=27, iOS=42}"
	                             AutomationProperties.IsInAccessibleTree="True" AutomationProperties.Name="{xct:Translate QuestionFrameThumbsDownAccessibilityName}"
	                             AutomationProperties.HelpText="{xct:Translate QuestionFrameThumbsDownAccessibilityText}">
		                    <VisualStateManager.VisualStateGroups>
			                    <VisualStateGroup Name="BrightenedStates">
				                    <VisualState Name="NotBrightened">
					                    <VisualState.Setters>
						                    <Setter Property="Source" Value="{AppThemeBinding Light={helpers:ImageResource RightToAskClient.Images.thumb_down_light.png}, Dark={helpers:ImageResource RightToAskClient.Images.thumb_down_dark.png} }"/>
					                    </VisualState.Setters>
				                    </VisualState>
				                    <VisualState Name="Brightened">
					                    <VisualState.Setters>
						                    <Setter Property="Source" Value="{helpers:ImageResource RightToAskClient.Images.thumb_down_filled.png}"/>
					                    </VisualState.Setters>
				                    </VisualState>
			                    </VisualStateGroup>
		                    </VisualStateManager.VisualStateGroups>
		                    </controls:ColorSingleToggleButton>
						<Label Text="{Binding DownVotes, StringFormat='{0:F0}'}" Style="{StaticResource NormalText}" Margin="0" Padding="0" VerticalOptions="CenterAndExpand"/>	
					</StackLayout>
					<StackLayout Orientation="Horizontal" HorizontalOptions="EndAndExpand">
						<!-- report/flag button -->
						<controls:ColorSingleToggleButton Padding="5" 
						                                  IsBrightened="{Binding Question.AlreadyReported}"
						                                  HeightRequest="{x:OnPlatform Android=27, iOS=42}"
						                                  IsEnabled="{Binding Question.AlreadyReported, Converter={StaticResource Key=cnvInvert}}"
						                                  Command="{Binding ReportCommand}"
						                                  BackgroundColor="Transparent"
						                                  AutomationProperties.IsInAccessibleTree="True"
						                                  AutomationProperties.Name="{xct:Translate QuestionFrameFlagButtonAccessibilityName}"
						                                  AutomationProperties.HelpText="{xct:Translate QuestionFrameFlagButtonAccessibilityTextRed}" >
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup Name="BrightenedStates">
									<VisualState Name="NotBrightened">
										<VisualState.Setters>
											<Setter Property="Source" Value="{AppThemeBinding Light={helpers:ImageResource RightToAskClient.Images.flags_light.png}, Dark={helpers:ImageResource RightToAskClient.Images.flags_dark.png} }"/>
										</VisualState.Setters>
									</VisualState>
									<VisualState Name="Brightened">
										<VisualState.Setters>
											<Setter Property="Source" Value="{AppThemeBinding Light={helpers:ImageResource RightToAskClient.Images.flags_filled_light.png}, Dark={helpers:ImageResource RightToAskClient.Images.flags_filled_dark.png} }"/>
										</VisualState.Setters>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</controls:ColorSingleToggleButton>
						<Label Text="{xct:Translate ReportDisplayCardButtonText}" Style="{StaticResource QuestionButtonText}" TextColor="{AppThemeBinding Light={StaticResource TextColorGray}, Dark=White}"/>
					</StackLayout>
					
				</FlexLayout>
				<!-- Answers, visible if there are any -->
				<Label x:Name="AnswerLabel" Text="{xct:Translate AnswerHeaderText}" Style="{StaticResource Header2}" />
				<StackLayout x:Name="ExistingAnswers" BindableLayout.ItemsSource="{Binding QuestionAnswers}">
					<BindableLayout.ItemTemplate>
						<DataTemplate x:DataType="models:Answer">
							<views:AnswerDisplayCard />
						</DataTemplate>
					</BindableLayout.ItemTemplate>
				</StackLayout>
				<Editor x:Name="AnswerEditor" Placeholder="{xct:Translate AnswerPlaceholderText}"
				        Style="{StaticResource NormalEditor}" Completed="Answer_Entered" />
				<Label Text="{xct:Translate WhoShouldAnswerTitle}" Style="{StaticResource Header2}" />
				<Label Text="{Binding QuestionAnswerers, StringFormat='{0:F0}'}" Style="{StaticResource LeftMedium}" />
				<StackLayout x:Name="AnswerPermissionCheckbox" Orientation="Horizontal">
					<Label Text="{xct:Translate AnswererPermissions}" Style="{StaticResource Header2}" />
					<CheckBox x:Name="AnswerCheckBox" 
					          IsChecked="{Binding OthersCanAddQuestionAnswerers}" 
					          Style="{StaticResource CheckBoxStyle}"
					          IsEnabled="{Binding HasAnswerers}"/>
				</StackLayout>
				<!--Question Askers/Option B things-->
				<StackLayout x:Name="RaiseLayout" IsVisible="{Binding IsRaiseLayoutVisible}">
					<!-- who should raise it -->
					<Label Text="{xct:Translate OptionBText4}" Style="{StaticResource Header2}" />
					<Label Text="{Binding QuestionAskers, StringFormat='{0:F0}'}" Style="{StaticResource LeftMedium}" />
					<!-- Ask the user whether they allow other users to add QuestionAskers. (Y/N) -->
					<StackLayout x:Name="AskerPermissionCheckbox" Orientation="Horizontal">
						<Label Text="{xct:Translate AskerPermissions}" Style="{StaticResource Header2}" />
						<CheckBox x:Name="RaiseCheckBox" 
						          IsChecked="{Binding OthersCanAddQuestionAskers}"  
						          Style="{StaticResource CheckBoxStyle}"
						          IsEnabled="{Binding HasAskers}"/>
					</StackLayout>
				</StackLayout>
				<!-- question writer -->
				<StackLayout Orientation="Horizontal">
					<StackLayout.GestureRecognizers>
						<TapGestureRecognizer Command="{Binding QuestionSuggesterCommand}" />
					</StackLayout.GestureRecognizers>
					<StackLayout Orientation="Vertical">
						<Label Text="{xct:Translate QuestionWriterHeaderText}" Style="{StaticResource Header2}" />
						<Label x:Name="WriterNameLabel" Text="{Binding Question.QuestionSuggester, StringFormat='{0:F0}'}"
						       Style="{StaticResource NormalText}" Margin="0, 10, 0, 0"
						       IsEnabled="{Binding IsNewQuestion, Converter={StaticResource Key=cnvInvert}}" />
					</StackLayout>
				</StackLayout>
				<!-- Background -->
				<StackLayout Orientation="Vertical">
					<Label x:Name="BackgroundLabel" Text="{xct:Translate BackgroundPageTitle}" Style="{StaticResource Header2}" />
					<Editor x:Name="BackgroundEditor" Placeholder="{xct:Translate AddBackgroundPlaceholderText}"
					        Text="{Binding Question.Background}"
					        Style="{StaticResource NormalEditor}"
					        IsReadOnly="{Binding CanEditBackground, Converter={StaticResource Key=cnvInvert}}" />
				</StackLayout>

			    <!-- Hansard link -->
			    <StackLayout Orientation="Vertical" IsVisible="{Binding IsNewQuestion, Converter={StaticResource Key=cnvInvert}}">
				    <Label Text="{xct:Translate LinkForAnswerHeaderText}" Style="{StaticResource Header2}"/>
				    <Editor x:Name="LinkToAnswerEditor" Placeholder="{xct:Translate LinkPlaceholderText}" Completed="Link_Entered"
				            Style="{StaticResource NormalEditor}" />
			    </StackLayout>
			    <Button x:Name="UpdateButton"
						Text="{xct:Translate EditQuestionButtonText}" Style="{StaticResource SaveButton}"
			            Command="{Binding EditAnswerCommand}" HorizontalOptions="Center" 
						IsVisible="{Binding IsUpdateButtonVisible}"
						xct:SemanticEffect.Hint="{xct:Translate EditQuestionButtonHint}"
			            xct:SemanticEffect.Description="{xct:Translate EditQuestionButtonText}"/>
			    <Button Text="{xct:Translate PublishQuestionButtonText}" Style="{StaticResource DoneButton}"
			            Command="{Binding SaveQuestionCommand}" HorizontalOptions="Center" IsVisible="{Binding IsNewQuestion}" 
			            xct:SemanticEffect.Hint="{xct:Translate PublishQuestionButtonText}"
			            xct:SemanticEffect.Description="{xct:Translate PublishQuestionButtonText}"/>
                <Label x:Name="ReportLabel" Text="{Binding ReportLabelText}" Style="{StaticResource ReportLabel}"
/>
		    </StackLayout>
	    </ScrollView>
    </ContentPage.Content>
</ContentPage>